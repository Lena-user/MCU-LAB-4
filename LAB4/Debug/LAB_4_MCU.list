
LAB_4_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  2000004c  08002f0c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08002f0c  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095b3  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5a  00000000  00000000  00029628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b70  00000000  00000000  0002c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d4  00000000  00000000  000430d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825c6  00000000  00000000  0004e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  000d0dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e7c 	.word	0x08002e7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002e7c 	.word	0x08002e7c

0800014c <isSelectMode>:
int keyReg2[3] = {NORMAL_STATE};
int keyReg3[3] = {NORMAL_STATE};
int keyPressTimer = 50;

int isSelectMode()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (selectFlag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isSelectMode+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isSelectMode+0x16>
	{
		selectFlag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isSelectMode+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isSelectMode+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000068 	.word	0x20000068

08000170 <isModifyMode>:

int isModifyMode()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (modifyFlag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isModifyMode+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isModifyMode+0x16>
	{
		modifyFlag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isModifyMode+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isModifyMode+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000006c 	.word	0x2000006c

08000194 <isSetMode>:

int isSetMode()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (setFlag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isSetMode+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isSetMode+0x16>
	{
		setFlag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isSetMode+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isSetMode+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000070 	.word	0x20000070

080001b8 <getKeyInput>:


void getKeyInput()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e09f      	b.n	8000304 <getKeyInput+0x14c>
	{
		keyReg0[i] = keyReg1[i];
 80001c4:	4a54      	ldr	r2, [pc, #336]	; (8000318 <getKeyInput+0x160>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4953      	ldr	r1, [pc, #332]	; (800031c <getKeyInput+0x164>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001d4:	4a52      	ldr	r2, [pc, #328]	; (8000320 <getKeyInput+0x168>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	494e      	ldr	r1, [pc, #312]	; (8000318 <getKeyInput+0x160>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d021      	beq.n	800022e <getKeyInput+0x76>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	dc2a      	bgt.n	8000246 <getKeyInput+0x8e>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d003      	beq.n	80001fe <getKeyInput+0x46>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d00c      	beq.n	8000216 <getKeyInput+0x5e>
			break;
		case SET_BUTTON:
			keyReg2[i] = HAL_GPIO_ReadPin(SET_BUTTON_GPIO_Port, SET_BUTTON_Pin);
			break;
		default:
			break;
 80001fc:	e023      	b.n	8000246 <getKeyInput+0x8e>
			keyReg2[i] = HAL_GPIO_ReadPin(SELECT_BUTTON_GPIO_Port, SELECT_BUTTON_Pin);
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4848      	ldr	r0, [pc, #288]	; (8000324 <getKeyInput+0x16c>)
 8000204:	f001 fe26 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	4619      	mov	r1, r3
 800020c:	4a44      	ldr	r2, [pc, #272]	; (8000320 <getKeyInput+0x168>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000214:	e018      	b.n	8000248 <getKeyInput+0x90>
			keyReg2[i] = HAL_GPIO_ReadPin(MODIFY_BUTTON_GPIO_Port, MODIFY_BUTTON_Pin);
 8000216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021a:	4842      	ldr	r0, [pc, #264]	; (8000324 <getKeyInput+0x16c>)
 800021c:	f001 fe1a 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	4619      	mov	r1, r3
 8000224:	4a3e      	ldr	r2, [pc, #248]	; (8000320 <getKeyInput+0x168>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800022c:	e00c      	b.n	8000248 <getKeyInput+0x90>
			keyReg2[i] = HAL_GPIO_ReadPin(SET_BUTTON_GPIO_Port, SET_BUTTON_Pin);
 800022e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000232:	483c      	ldr	r0, [pc, #240]	; (8000324 <getKeyInput+0x16c>)
 8000234:	f001 fe0e 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	4619      	mov	r1, r3
 800023c:	4a38      	ldr	r2, [pc, #224]	; (8000320 <getKeyInput+0x168>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000244:	e000      	b.n	8000248 <getKeyInput+0x90>
			break;
 8000246:	bf00      	nop
		}
		if ((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000248:	4a34      	ldr	r2, [pc, #208]	; (800031c <getKeyInput+0x164>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4931      	ldr	r1, [pc, #196]	; (8000318 <getKeyInput+0x160>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d150      	bne.n	80002fe <getKeyInput+0x146>
 800025c:	4a2e      	ldr	r2, [pc, #184]	; (8000318 <getKeyInput+0x160>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	492e      	ldr	r1, [pc, #184]	; (8000320 <getKeyInput+0x168>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d146      	bne.n	80002fe <getKeyInput+0x146>
		{
			if (keyReg3[i] != keyReg2[i])
 8000270:	4a2d      	ldr	r2, [pc, #180]	; (8000328 <getKeyInput+0x170>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4929      	ldr	r1, [pc, #164]	; (8000320 <getKeyInput+0x168>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d02b      	beq.n	80002dc <getKeyInput+0x124>
			{
				keyReg3[i] = keyReg2[i];
 8000284:	4a26      	ldr	r2, [pc, #152]	; (8000320 <getKeyInput+0x168>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4926      	ldr	r1, [pc, #152]	; (8000328 <getKeyInput+0x170>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == PRESSED_STATE)
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <getKeyInput+0x168>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d12e      	bne.n	80002fe <getKeyInput+0x146>
				{
					//TODO
					switch(i)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d011      	beq.n	80002ca <getKeyInput+0x112>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	dc12      	bgt.n	80002d2 <getKeyInput+0x11a>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <getKeyInput+0x102>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d004      	beq.n	80002c2 <getKeyInput+0x10a>
						break;
					case SET_BUTTON:
						setFlag = 1;
						break;
					default:
						break;
 80002b8:	e00b      	b.n	80002d2 <getKeyInput+0x11a>
						selectFlag = 1;
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <getKeyInput+0x174>)
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
						break;
 80002c0:	e008      	b.n	80002d4 <getKeyInput+0x11c>
						modifyFlag = 1;
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <getKeyInput+0x178>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
						break;
 80002c8:	e004      	b.n	80002d4 <getKeyInput+0x11c>
						setFlag = 1;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <getKeyInput+0x17c>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
						break;
 80002d0:	e000      	b.n	80002d4 <getKeyInput+0x11c>
						break;
 80002d2:	bf00      	nop
					}
					keyPressTimer = 50;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <getKeyInput+0x180>)
 80002d6:	2232      	movs	r2, #50	; 0x32
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e010      	b.n	80002fe <getKeyInput+0x146>
				}
			}
			else
			{
				keyPressTimer--;
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <getKeyInput+0x180>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a15      	ldr	r2, [pc, #84]	; (8000338 <getKeyInput+0x180>)
 80002e4:	6013      	str	r3, [r2, #0]
				if (keyPressTimer <= 0)
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <getKeyInput+0x180>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	dc07      	bgt.n	80002fe <getKeyInput+0x146>
				{
					//TODO
					keyReg3[i] = NORMAL_STATE;
 80002ee:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <getKeyInput+0x170>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2101      	movs	r1, #1
 80002f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					keyPressTimer = 50;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <getKeyInput+0x180>)
 80002fa:	2232      	movs	r2, #50	; 0x32
 80002fc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3301      	adds	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b02      	cmp	r3, #2
 8000308:	f77f af5c 	ble.w	80001c4 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	2000000c 	.word	0x2000000c
 800031c:	20000000 	.word	0x20000000
 8000320:	20000018 	.word	0x20000018
 8000324:	40011000 	.word	0x40011000
 8000328:	20000024 	.word	0x20000024
 800032c:	20000068 	.word	0x20000068
 8000330:	2000006c 	.word	0x2000006c
 8000334:	20000070 	.word	0x20000070
 8000338:	20000030 	.word	0x20000030

0800033c <FSM_Normal_Mode>:

#include "FSM_Settings.h"


void FSM_Normal_Mode()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	  init_Led();
 8000340:	f000 f9be 	bl	80006c0 <init_Led>
	  update_led = SCH_Add_Task(update_Led_Traffic, 0, 1000);
 8000344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000348:	2100      	movs	r1, #0
 800034a:	480f      	ldr	r0, [pc, #60]	; (8000388 <FSM_Normal_Mode+0x4c>)
 800034c:	f000 ffc6 	bl	80012dc <SCH_Add_Task>
 8000350:	4603      	mov	r3, r0
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <FSM_Normal_Mode+0x50>)
 8000356:	701a      	strb	r2, [r3, #0]
	  scan_led_1 = SCH_Add_Task(scan_Led_1, 0, 1000);
 8000358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800035c:	2100      	movs	r1, #0
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <FSM_Normal_Mode+0x54>)
 8000360:	f000 ffbc 	bl	80012dc <SCH_Add_Task>
 8000364:	4603      	mov	r3, r0
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <FSM_Normal_Mode+0x58>)
 800036a:	701a      	strb	r2, [r3, #0]
	  scan_led_2 = SCH_Add_Task(scan_Led_2, 500, 1000);
 800036c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000370:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000374:	4808      	ldr	r0, [pc, #32]	; (8000398 <FSM_Normal_Mode+0x5c>)
 8000376:	f000 ffb1 	bl	80012dc <SCH_Add_Task>
 800037a:	4603      	mov	r3, r0
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <FSM_Normal_Mode+0x60>)
 8000380:	701a      	strb	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	08000799 	.word	0x08000799
 800038c:	200003c0 	.word	0x200003c0
 8000390:	08000a29 	.word	0x08000a29
 8000394:	200003a8 	.word	0x200003a8
 8000398:	08000a55 	.word	0x08000a55
 800039c:	200003cc 	.word	0x200003cc

080003a0 <FSM_Settings_run>:

void FSM_Settings_run()
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	switch (modeFSM) {
 80003a4:	4bb8      	ldr	r3, [pc, #736]	; (8000688 <FSM_Settings_run+0x2e8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	f200 8161 	bhi.w	8000670 <FSM_Settings_run+0x2d0>
 80003ae:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <FSM_Settings_run+0x14>)
 80003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b4:	080003c5 	.word	0x080003c5
 80003b8:	0800041b 	.word	0x0800041b
 80003bc:	080004c3 	.word	0x080004c3
 80003c0:	08000591 	.word	0x08000591
		case NORMAL_MODE:
			// SCH_Add_Task(FSM_Normal_Mode, 0, 0);
			if (isSelectMode() == 1)
 80003c4:	f7ff fec2 	bl	800014c <isSelectMode>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	f040 8152 	bne.w	8000674 <FSM_Settings_run+0x2d4>
			{
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80003d6:	48ad      	ldr	r0, [pc, #692]	; (800068c <FSM_Settings_run+0x2ec>)
 80003d8:	f001 fd53 	bl	8001e82 <HAL_GPIO_WritePin>
				                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003e2:	48ab      	ldr	r0, [pc, #684]	; (8000690 <FSM_Settings_run+0x2f0>)
 80003e4:	f001 fd4d 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ee:	48a8      	ldr	r0, [pc, #672]	; (8000690 <FSM_Settings_run+0x2f0>)
 80003f0:	f001 fd47 	bl	8001e82 <HAL_GPIO_WritePin>
				SCH_Delete_Task(update_led);
 80003f4:	4ba7      	ldr	r3, [pc, #668]	; (8000694 <FSM_Settings_run+0x2f4>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 ffcb 	bl	8001394 <SCH_Delete_Task>
				SCH_Delete_Task(scan_led_1);
 80003fe:	4ba6      	ldr	r3, [pc, #664]	; (8000698 <FSM_Settings_run+0x2f8>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f000 ffc6 	bl	8001394 <SCH_Delete_Task>
				SCH_Delete_Task(scan_led_2);
 8000408:	4ba4      	ldr	r3, [pc, #656]	; (800069c <FSM_Settings_run+0x2fc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f000 ffc1 	bl	8001394 <SCH_Delete_Task>
				modeFSM = MODIFY_RED;
 8000412:	4b9d      	ldr	r3, [pc, #628]	; (8000688 <FSM_Settings_run+0x2e8>)
 8000414:	2201      	movs	r2, #1
 8000416:	601a      	str	r2, [r3, #0]
			}
			break;
 8000418:	e12c      	b.n	8000674 <FSM_Settings_run+0x2d4>
		case MODIFY_RED:
			display_Led7_Segment(modifyRed);
 800041a:	4ba1      	ldr	r3, [pc, #644]	; (80006a0 <FSM_Settings_run+0x300>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fe8a 	bl	8001138 <display_Led7_Segment>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4898      	ldr	r0, [pc, #608]	; (800068c <FSM_Settings_run+0x2ec>)
 800042a:	f001 fd2a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	4895      	ldr	r0, [pc, #596]	; (800068c <FSM_Settings_run+0x2ec>)
 8000436:	f001 fd24 	bl	8001e82 <HAL_GPIO_WritePin>
			if (isModifyMode() == 1)
 800043a:	f7ff fe99 	bl	8000170 <isModifyMode>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d10e      	bne.n	8000462 <FSM_Settings_run+0xc2>
			{
				modifyRed = (modifyRed + 1) % 100;
 8000444:	4b96      	ldr	r3, [pc, #600]	; (80006a0 <FSM_Settings_run+0x300>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	4b96      	ldr	r3, [pc, #600]	; (80006a4 <FSM_Settings_run+0x304>)
 800044c:	fb83 1302 	smull	r1, r3, r3, r2
 8000450:	1159      	asrs	r1, r3, #5
 8000452:	17d3      	asrs	r3, r2, #31
 8000454:	1acb      	subs	r3, r1, r3
 8000456:	2164      	movs	r1, #100	; 0x64
 8000458:	fb01 f303 	mul.w	r3, r1, r3
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	4a90      	ldr	r2, [pc, #576]	; (80006a0 <FSM_Settings_run+0x300>)
 8000460:	6013      	str	r3, [r2, #0]
			}
			if (isSetMode() == 1)
 8000462:	f7ff fe97 	bl	8000194 <isSetMode>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d115      	bne.n	8000498 <FSM_Settings_run+0xf8>
			{
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2120      	movs	r1, #32
 8000470:	4886      	ldr	r0, [pc, #536]	; (800068c <FSM_Settings_run+0x2ec>)
 8000472:	f001 fd06 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4883      	ldr	r0, [pc, #524]	; (800068c <FSM_Settings_run+0x2ec>)
 800047e:	f001 fd00 	bl	8001e82 <HAL_GPIO_WritePin>
				durationRed = modifyRed * 1000;
 8000482:	4b87      	ldr	r3, [pc, #540]	; (80006a0 <FSM_Settings_run+0x300>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	4a86      	ldr	r2, [pc, #536]	; (80006a8 <FSM_Settings_run+0x308>)
 8000490:	6013      	str	r3, [r2, #0]
				modeFSM = MODIFY_YELLOW;
 8000492:	4b7d      	ldr	r3, [pc, #500]	; (8000688 <FSM_Settings_run+0x2e8>)
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
			}
			if (isSelectMode() == 1)
 8000498:	f7ff fe58 	bl	800014c <isSelectMode>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 80ea 	bne.w	8000678 <FSM_Settings_run+0x2d8>
			{
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2120      	movs	r1, #32
 80004a8:	4878      	ldr	r0, [pc, #480]	; (800068c <FSM_Settings_run+0x2ec>)
 80004aa:	f001 fcea 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	4875      	ldr	r0, [pc, #468]	; (800068c <FSM_Settings_run+0x2ec>)
 80004b6:	f001 fce4 	bl	8001e82 <HAL_GPIO_WritePin>
				modeFSM = MODIFY_YELLOW;
 80004ba:	4b73      	ldr	r3, [pc, #460]	; (8000688 <FSM_Settings_run+0x2e8>)
 80004bc:	2202      	movs	r2, #2
 80004be:	601a      	str	r2, [r3, #0]
			}
			break;
 80004c0:	e0da      	b.n	8000678 <FSM_Settings_run+0x2d8>
		case MODIFY_YELLOW:
			display_Led7_Segment(modifyYellow);
 80004c2:	4b7a      	ldr	r3, [pc, #488]	; (80006ac <FSM_Settings_run+0x30c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fe36 	bl	8001138 <display_Led7_Segment>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	486e      	ldr	r0, [pc, #440]	; (800068c <FSM_Settings_run+0x2ec>)
 80004d2:	f001 fcd6 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004dc:	486b      	ldr	r0, [pc, #428]	; (800068c <FSM_Settings_run+0x2ec>)
 80004de:	f001 fcd0 	bl	8001e82 <HAL_GPIO_WritePin>
			if (isModifyMode() == 1)
 80004e2:	f7ff fe45 	bl	8000170 <isModifyMode>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d112      	bne.n	8000512 <FSM_Settings_run+0x172>
			{
				if (modifyGreen >= 1)
 80004ec:	4b70      	ldr	r3, [pc, #448]	; (80006b0 <FSM_Settings_run+0x310>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd0e      	ble.n	8000512 <FSM_Settings_run+0x172>
					modifyYellow = (modifyYellow + 1) % 100;
 80004f4:	4b6d      	ldr	r3, [pc, #436]	; (80006ac <FSM_Settings_run+0x30c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	4b6a      	ldr	r3, [pc, #424]	; (80006a4 <FSM_Settings_run+0x304>)
 80004fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000500:	1159      	asrs	r1, r3, #5
 8000502:	17d3      	asrs	r3, r2, #31
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	2164      	movs	r1, #100	; 0x64
 8000508:	fb01 f303 	mul.w	r3, r1, r3
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a67      	ldr	r2, [pc, #412]	; (80006ac <FSM_Settings_run+0x30c>)
 8000510:	6013      	str	r3, [r2, #0]
			}
			if (isSetMode() == 1)
 8000512:	f7ff fe3f 	bl	8000194 <isSetMode>
 8000516:	4603      	mov	r3, r0
 8000518:	2b01      	cmp	r3, #1
 800051a:	d124      	bne.n	8000566 <FSM_Settings_run+0x1c6>
			{
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	485a      	ldr	r0, [pc, #360]	; (800068c <FSM_Settings_run+0x2ec>)
 8000522:	f001 fcae 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4857      	ldr	r0, [pc, #348]	; (800068c <FSM_Settings_run+0x2ec>)
 800052e:	f001 fca8 	bl	8001e82 <HAL_GPIO_WritePin>
				durationYellow = modifyYellow * 1000;
 8000532:	4b5e      	ldr	r3, [pc, #376]	; (80006ac <FSM_Settings_run+0x30c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	4a5d      	ldr	r2, [pc, #372]	; (80006b4 <FSM_Settings_run+0x314>)
 8000540:	6013      	str	r3, [r2, #0]
				modifyGreen = modifyRed - modifyYellow;
 8000542:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <FSM_Settings_run+0x300>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b59      	ldr	r3, [pc, #356]	; (80006ac <FSM_Settings_run+0x30c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	4a58      	ldr	r2, [pc, #352]	; (80006b0 <FSM_Settings_run+0x310>)
 800054e:	6013      	str	r3, [r2, #0]
				durationGreen = modifyGreen * 1000;
 8000550:	4b57      	ldr	r3, [pc, #348]	; (80006b0 <FSM_Settings_run+0x310>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	4a56      	ldr	r2, [pc, #344]	; (80006b8 <FSM_Settings_run+0x318>)
 800055e:	6013      	str	r3, [r2, #0]
				modeFSM = MODIFY_GREEN;
 8000560:	4b49      	ldr	r3, [pc, #292]	; (8000688 <FSM_Settings_run+0x2e8>)
 8000562:	2203      	movs	r2, #3
 8000564:	601a      	str	r2, [r3, #0]
			}
			if (isSelectMode() == 1)
 8000566:	f7ff fdf1 	bl	800014c <isSelectMode>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	f040 8085 	bne.w	800067c <FSM_Settings_run+0x2dc>
			{
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4845      	ldr	r0, [pc, #276]	; (800068c <FSM_Settings_run+0x2ec>)
 8000578:	f001 fc83 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000582:	4842      	ldr	r0, [pc, #264]	; (800068c <FSM_Settings_run+0x2ec>)
 8000584:	f001 fc7d 	bl	8001e82 <HAL_GPIO_WritePin>
				modeFSM = MODIFY_GREEN;
 8000588:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <FSM_Settings_run+0x2e8>)
 800058a:	2203      	movs	r2, #3
 800058c:	601a      	str	r2, [r3, #0]
			}
			break;
 800058e:	e075      	b.n	800067c <FSM_Settings_run+0x2dc>
		case MODIFY_GREEN:
			display_Led7_Segment(modifyGreen);
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <FSM_Settings_run+0x310>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fdcf 	bl	8001138 <display_Led7_Segment>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	483b      	ldr	r0, [pc, #236]	; (800068c <FSM_Settings_run+0x2ec>)
 80005a0:	f001 fc6f 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005aa:	4838      	ldr	r0, [pc, #224]	; (800068c <FSM_Settings_run+0x2ec>)
 80005ac:	f001 fc69 	bl	8001e82 <HAL_GPIO_WritePin>
			if (isModifyMode() == 1)
 80005b0:	f7ff fdde 	bl	8000170 <isModifyMode>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d112      	bne.n	80005e0 <FSM_Settings_run+0x240>
			{
				if (modifyYellow >= 1)
 80005ba:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <FSM_Settings_run+0x30c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd0e      	ble.n	80005e0 <FSM_Settings_run+0x240>
					modifyGreen = (modifyGreen + 1) % 100;
 80005c2:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <FSM_Settings_run+0x310>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <FSM_Settings_run+0x304>)
 80005ca:	fb83 1302 	smull	r1, r3, r3, r2
 80005ce:	1159      	asrs	r1, r3, #5
 80005d0:	17d3      	asrs	r3, r2, #31
 80005d2:	1acb      	subs	r3, r1, r3
 80005d4:	2164      	movs	r1, #100	; 0x64
 80005d6:	fb01 f303 	mul.w	r3, r1, r3
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <FSM_Settings_run+0x310>)
 80005de:	6013      	str	r3, [r2, #0]
			}
			if (isSetMode() == 1)
 80005e0:	f7ff fdd8 	bl	8000194 <isSetMode>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d129      	bne.n	800063e <FSM_Settings_run+0x29e>
			{
				durationGreen = modifyGreen * 1000;
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <FSM_Settings_run+0x310>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <FSM_Settings_run+0x318>)
 80005f8:	6013      	str	r3, [r2, #0]
				modifyYellow = modifyRed - modifyGreen;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <FSM_Settings_run+0x300>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <FSM_Settings_run+0x310>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <FSM_Settings_run+0x30c>)
 8000606:	6013      	str	r3, [r2, #0]
				durationYellow = modifyYellow * 1000;
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <FSM_Settings_run+0x30c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <FSM_Settings_run+0x314>)
 8000616:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <FSM_Settings_run+0x2ec>)
 800061e:	f001 fc30 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <FSM_Settings_run+0x2ec>)
 800062a:	f001 fc2a 	bl	8001e82 <HAL_GPIO_WritePin>
				SCH_Add_Task(FSM_Normal_Mode, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <FSM_Settings_run+0x31c>)
 8000634:	f000 fe52 	bl	80012dc <SCH_Add_Task>
				modeFSM = NORMAL_MODE;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <FSM_Settings_run+0x2e8>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
			}
			if (isSelectMode() == 1)
 800063e:	f7ff fd85 	bl	800014c <isSelectMode>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d11b      	bne.n	8000680 <FSM_Settings_run+0x2e0>
			{
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <FSM_Settings_run+0x2ec>)
 800064e:	f001 fc18 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <FSM_Settings_run+0x2ec>)
 800065a:	f001 fc12 	bl	8001e82 <HAL_GPIO_WritePin>
				SCH_Add_Task(FSM_Normal_Mode, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	4816      	ldr	r0, [pc, #88]	; (80006bc <FSM_Settings_run+0x31c>)
 8000664:	f000 fe3a 	bl	80012dc <SCH_Add_Task>
				modeFSM = NORMAL_MODE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <FSM_Settings_run+0x2e8>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
			}
			break;
 800066e:	e007      	b.n	8000680 <FSM_Settings_run+0x2e0>
		default:
			break;
 8000670:	bf00      	nop
 8000672:	e006      	b.n	8000682 <FSM_Settings_run+0x2e2>
			break;
 8000674:	bf00      	nop
 8000676:	e004      	b.n	8000682 <FSM_Settings_run+0x2e2>
			break;
 8000678:	bf00      	nop
 800067a:	e002      	b.n	8000682 <FSM_Settings_run+0x2e2>
			break;
 800067c:	bf00      	nop
 800067e:	e000      	b.n	8000682 <FSM_Settings_run+0x2e2>
			break;
 8000680:	bf00      	nop
	}
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000074 	.word	0x20000074
 800068c:	40010800 	.word	0x40010800
 8000690:	40010c00 	.word	0x40010c00
 8000694:	200003c0 	.word	0x200003c0
 8000698:	200003a8 	.word	0x200003a8
 800069c:	200003cc 	.word	0x200003cc
 80006a0:	20000078 	.word	0x20000078
 80006a4:	51eb851f 	.word	0x51eb851f
 80006a8:	20000034 	.word	0x20000034
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	20000080 	.word	0x20000080
 80006b4:	2000003c 	.word	0x2000003c
 80006b8:	20000038 	.word	0x20000038
 80006bc:	0800033d 	.word	0x0800033d

080006c0 <init_Led>:
int ledBuffer[2];
int green1, red1, yellow1;
int green2, red2, yellow2;

void init_Led()
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	red1 = red2 = modifyRed = durationRed / 1000;
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <init_Led+0xa0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <init_Led+0xa4>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1192      	asrs	r2, r2, #6
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	4a24      	ldr	r2, [pc, #144]	; (8000768 <init_Led+0xa8>)
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <init_Led+0xa8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <init_Led+0xac>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <init_Led+0xac>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <init_Led+0xb0>)
 80006e6:	6013      	str	r3, [r2, #0]
	yellow1 = yellow2 = modifyYellow = durationYellow / 1000;
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <init_Led+0xb4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <init_Led+0xa4>)
 80006ee:	fb82 1203 	smull	r1, r2, r2, r3
 80006f2:	1192      	asrs	r2, r2, #6
 80006f4:	17db      	asrs	r3, r3, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <init_Led+0xb8>)
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <init_Led+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <init_Led+0xbc>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <init_Led+0xbc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <init_Led+0xc0>)
 800070a:	6013      	str	r3, [r2, #0]
	green1 = green2 = modifyGreen = durationGreen / 1000;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <init_Led+0xc4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <init_Led+0xa4>)
 8000712:	fb82 1203 	smull	r1, r2, r2, r3
 8000716:	1192      	asrs	r2, r2, #6
 8000718:	17db      	asrs	r3, r3, #31
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <init_Led+0xc8>)
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <init_Led+0xc8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <init_Led+0xcc>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <init_Led+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a18      	ldr	r2, [pc, #96]	; (8000790 <init_Led+0xd0>)
 800072e:	6013      	str	r3, [r2, #0]
	ledBuffer[0] = durationGreen / 1000;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <init_Led+0xc4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <init_Led+0xa4>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1192      	asrs	r2, r2, #6
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <init_Led+0xd4>)
 8000742:	6013      	str	r3, [r2, #0]
	ledBuffer[1] = durationRed / 1000;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <init_Led+0xa0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <init_Led+0xa4>)
 800074a:	fb82 1203 	smull	r1, r2, r2, r3
 800074e:	1192      	asrs	r2, r2, #6
 8000750:	17db      	asrs	r3, r3, #31
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <init_Led+0xd4>)
 8000756:	6053      	str	r3, [r2, #4]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000034 	.word	0x20000034
 8000764:	10624dd3 	.word	0x10624dd3
 8000768:	20000078 	.word	0x20000078
 800076c:	200003ac 	.word	0x200003ac
 8000770:	200003c4 	.word	0x200003c4
 8000774:	2000003c 	.word	0x2000003c
 8000778:	2000007c 	.word	0x2000007c
 800077c:	200003b8 	.word	0x200003b8
 8000780:	200003a4 	.word	0x200003a4
 8000784:	20000038 	.word	0x20000038
 8000788:	20000080 	.word	0x20000080
 800078c:	200003bc 	.word	0x200003bc
 8000790:	200003c8 	.word	0x200003c8
 8000794:	200003b0 	.word	0x200003b0

08000798 <update_Led_Traffic>:

void update_Led_Traffic()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	if (green1 > 0)
 800079c:	4b8b      	ldr	r3, [pc, #556]	; (80009cc <update_Led_Traffic+0x234>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd16      	ble.n	80007d2 <update_Led_Traffic+0x3a>
	{
		ledBuffer[0] = green1--;
 80007a4:	4b89      	ldr	r3, [pc, #548]	; (80009cc <update_Led_Traffic+0x234>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4988      	ldr	r1, [pc, #544]	; (80009cc <update_Led_Traffic+0x234>)
 80007ac:	600a      	str	r2, [r1, #0]
 80007ae:	4a88      	ldr	r2, [pc, #544]	; (80009d0 <update_Led_Traffic+0x238>)
 80007b0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4887      	ldr	r0, [pc, #540]	; (80009d4 <update_Led_Traffic+0x23c>)
 80007b8:	f001 fb63 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	4884      	ldr	r0, [pc, #528]	; (80009d4 <update_Led_Traffic+0x23c>)
 80007c2:	f001 fb5e 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	4882      	ldr	r0, [pc, #520]	; (80009d4 <update_Led_Traffic+0x23c>)
 80007cc:	f001 fb59 	bl	8001e82 <HAL_GPIO_WritePin>
 80007d0:	e069      	b.n	80008a6 <update_Led_Traffic+0x10e>
	}

	else if (yellow1 > 0)
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <update_Led_Traffic+0x240>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd16      	ble.n	8000808 <update_Led_Traffic+0x70>
	{
		ledBuffer[0] = yellow1--;
 80007da:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <update_Led_Traffic+0x240>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	497d      	ldr	r1, [pc, #500]	; (80009d8 <update_Led_Traffic+0x240>)
 80007e2:	600a      	str	r2, [r1, #0]
 80007e4:	4a7a      	ldr	r2, [pc, #488]	; (80009d0 <update_Led_Traffic+0x238>)
 80007e6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2120      	movs	r1, #32
 80007ec:	4879      	ldr	r0, [pc, #484]	; (80009d4 <update_Led_Traffic+0x23c>)
 80007ee:	f001 fb48 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4877      	ldr	r0, [pc, #476]	; (80009d4 <update_Led_Traffic+0x23c>)
 80007f8:	f001 fb43 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4874      	ldr	r0, [pc, #464]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000802:	f001 fb3e 	bl	8001e82 <HAL_GPIO_WritePin>
 8000806:	e04e      	b.n	80008a6 <update_Led_Traffic+0x10e>
	}
	else if (red1 > 0)
 8000808:	4b74      	ldr	r3, [pc, #464]	; (80009dc <update_Led_Traffic+0x244>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd16      	ble.n	800083e <update_Led_Traffic+0xa6>
	{
		ledBuffer[0] = red1--;
 8000810:	4b72      	ldr	r3, [pc, #456]	; (80009dc <update_Led_Traffic+0x244>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	4971      	ldr	r1, [pc, #452]	; (80009dc <update_Led_Traffic+0x244>)
 8000818:	600a      	str	r2, [r1, #0]
 800081a:	4a6d      	ldr	r2, [pc, #436]	; (80009d0 <update_Led_Traffic+0x238>)
 800081c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	486c      	ldr	r0, [pc, #432]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000824:	f001 fb2d 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2140      	movs	r1, #64	; 0x40
 800082c:	4869      	ldr	r0, [pc, #420]	; (80009d4 <update_Led_Traffic+0x23c>)
 800082e:	f001 fb28 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4867      	ldr	r0, [pc, #412]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000838:	f001 fb23 	bl	8001e82 <HAL_GPIO_WritePin>
 800083c:	e033      	b.n	80008a6 <update_Led_Traffic+0x10e>
	}
	else
	{
		red1 = durationRed / 1000;
 800083e:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <update_Led_Traffic+0x248>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a68      	ldr	r2, [pc, #416]	; (80009e4 <update_Led_Traffic+0x24c>)
 8000844:	fb82 1203 	smull	r1, r2, r2, r3
 8000848:	1192      	asrs	r2, r2, #6
 800084a:	17db      	asrs	r3, r3, #31
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	4a63      	ldr	r2, [pc, #396]	; (80009dc <update_Led_Traffic+0x244>)
 8000850:	6013      	str	r3, [r2, #0]
		yellow1 = durationYellow / 1000;
 8000852:	4b65      	ldr	r3, [pc, #404]	; (80009e8 <update_Led_Traffic+0x250>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a63      	ldr	r2, [pc, #396]	; (80009e4 <update_Led_Traffic+0x24c>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	1192      	asrs	r2, r2, #6
 800085e:	17db      	asrs	r3, r3, #31
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	4a5d      	ldr	r2, [pc, #372]	; (80009d8 <update_Led_Traffic+0x240>)
 8000864:	6013      	str	r3, [r2, #0]
		green1 = durationGreen / 1000;
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <update_Led_Traffic+0x254>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a5e      	ldr	r2, [pc, #376]	; (80009e4 <update_Led_Traffic+0x24c>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1192      	asrs	r2, r2, #6
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a55      	ldr	r2, [pc, #340]	; (80009cc <update_Led_Traffic+0x234>)
 8000878:	6013      	str	r3, [r2, #0]
		ledBuffer[0] = green1--;
 800087a:	4b54      	ldr	r3, [pc, #336]	; (80009cc <update_Led_Traffic+0x234>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4952      	ldr	r1, [pc, #328]	; (80009cc <update_Led_Traffic+0x234>)
 8000882:	600a      	str	r2, [r1, #0]
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <update_Led_Traffic+0x238>)
 8000886:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2120      	movs	r1, #32
 800088c:	4851      	ldr	r0, [pc, #324]	; (80009d4 <update_Led_Traffic+0x23c>)
 800088e:	f001 faf8 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	484f      	ldr	r0, [pc, #316]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000898:	f001 faf3 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	484c      	ldr	r0, [pc, #304]	; (80009d4 <update_Led_Traffic+0x23c>)
 80008a2:	f001 faee 	bl	8001e82 <HAL_GPIO_WritePin>
	}

	if (red2 > 0)
 80008a6:	4b52      	ldr	r3, [pc, #328]	; (80009f0 <update_Led_Traffic+0x258>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dd19      	ble.n	80008e2 <update_Led_Traffic+0x14a>
	{
		ledBuffer[1] = red2--;
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <update_Led_Traffic+0x258>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	494e      	ldr	r1, [pc, #312]	; (80009f0 <update_Led_Traffic+0x258>)
 80008b6:	600a      	str	r2, [r1, #0]
 80008b8:	4a45      	ldr	r2, [pc, #276]	; (80009d0 <update_Led_Traffic+0x238>)
 80008ba:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4844      	ldr	r0, [pc, #272]	; (80009d4 <update_Led_Traffic+0x23c>)
 80008c4:	f001 fadd 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4841      	ldr	r0, [pc, #260]	; (80009d4 <update_Led_Traffic+0x23c>)
 80008d0:	f001 fad7 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	483e      	ldr	r0, [pc, #248]	; (80009d4 <update_Led_Traffic+0x23c>)
 80008dc:	f001 fad1 	bl	8001e82 <HAL_GPIO_WritePin>
		ledBuffer[1] = red2--;
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
	}
}
 80008e0:	e072      	b.n	80009c8 <update_Led_Traffic+0x230>
	else if (green2 > 0)
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <update_Led_Traffic+0x25c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dd19      	ble.n	800091e <update_Led_Traffic+0x186>
		ledBuffer[1] = green2--;
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <update_Led_Traffic+0x25c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4940      	ldr	r1, [pc, #256]	; (80009f4 <update_Led_Traffic+0x25c>)
 80008f2:	600a      	str	r2, [r1, #0]
 80008f4:	4a36      	ldr	r2, [pc, #216]	; (80009d0 <update_Led_Traffic+0x238>)
 80008f6:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	4835      	ldr	r0, [pc, #212]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000900:	f001 fabf 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090a:	4832      	ldr	r0, [pc, #200]	; (80009d4 <update_Led_Traffic+0x23c>)
 800090c:	f001 fab9 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000916:	482f      	ldr	r0, [pc, #188]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000918:	f001 fab3 	bl	8001e82 <HAL_GPIO_WritePin>
}
 800091c:	e054      	b.n	80009c8 <update_Led_Traffic+0x230>
	else if (yellow2 > 0)
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <update_Led_Traffic+0x260>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dd19      	ble.n	800095a <update_Led_Traffic+0x1c2>
		ledBuffer[1] = yellow2--;
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <update_Led_Traffic+0x260>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	4932      	ldr	r1, [pc, #200]	; (80009f8 <update_Led_Traffic+0x260>)
 800092e:	600a      	str	r2, [r1, #0]
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <update_Led_Traffic+0x238>)
 8000932:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	4826      	ldr	r0, [pc, #152]	; (80009d4 <update_Led_Traffic+0x23c>)
 800093c:	f001 faa1 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	4823      	ldr	r0, [pc, #140]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000948:	f001 fa9b 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <update_Led_Traffic+0x23c>)
 8000954:	f001 fa95 	bl	8001e82 <HAL_GPIO_WritePin>
}
 8000958:	e036      	b.n	80009c8 <update_Led_Traffic+0x230>
		red2 = durationRed / 1000;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <update_Led_Traffic+0x248>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <update_Led_Traffic+0x24c>)
 8000960:	fb82 1203 	smull	r1, r2, r2, r3
 8000964:	1192      	asrs	r2, r2, #6
 8000966:	17db      	asrs	r3, r3, #31
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <update_Led_Traffic+0x258>)
 800096c:	6013      	str	r3, [r2, #0]
		yellow2 = durationYellow / 1000;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <update_Led_Traffic+0x250>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <update_Led_Traffic+0x24c>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	1192      	asrs	r2, r2, #6
 800097a:	17db      	asrs	r3, r3, #31
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <update_Led_Traffic+0x260>)
 8000980:	6013      	str	r3, [r2, #0]
		green2 = durationGreen / 1000;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <update_Led_Traffic+0x254>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <update_Led_Traffic+0x24c>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	1192      	asrs	r2, r2, #6
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <update_Led_Traffic+0x25c>)
 8000994:	6013      	str	r3, [r2, #0]
		ledBuffer[1] = red2--;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <update_Led_Traffic+0x258>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1e5a      	subs	r2, r3, #1
 800099c:	4914      	ldr	r1, [pc, #80]	; (80009f0 <update_Led_Traffic+0x258>)
 800099e:	600a      	str	r2, [r1, #0]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <update_Led_Traffic+0x238>)
 80009a2:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <update_Led_Traffic+0x23c>)
 80009ac:	f001 fa69 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <update_Led_Traffic+0x23c>)
 80009b8:	f001 fa63 	bl	8001e82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <update_Led_Traffic+0x23c>)
 80009c4:	f001 fa5d 	bl	8001e82 <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200003c8 	.word	0x200003c8
 80009d0:	200003b0 	.word	0x200003b0
 80009d4:	40010800 	.word	0x40010800
 80009d8:	200003a4 	.word	0x200003a4
 80009dc:	200003c4 	.word	0x200003c4
 80009e0:	20000034 	.word	0x20000034
 80009e4:	10624dd3 	.word	0x10624dd3
 80009e8:	2000003c 	.word	0x2000003c
 80009ec:	20000038 	.word	0x20000038
 80009f0:	200003ac 	.word	0x200003ac
 80009f4:	200003bc 	.word	0x200003bc
 80009f8:	200003b8 	.word	0x200003b8

080009fc <display_Led_Buffer>:

void display_Led_Buffer(int index)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	display_Led7_Segment(ledBuffer[index % 2]);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <display_Led_Buffer+0x28>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fb8e 	bl	8001138 <display_Led7_Segment>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200003b0 	.word	0x200003b0

08000a28 <scan_Led_1>:
void scan_Led_1()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	display_Led_Buffer(0);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ffe5 	bl	80009fc <display_Led_Buffer>
	HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <scan_Led_1+0x28>)
 8000a3a:	f001 fa22 	bl	8001e82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <scan_Led_1+0x28>)
 8000a46:	f001 fa1c 	bl	8001e82 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <scan_Led_2>:
void scan_Led_2()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	display_Led_Buffer(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff ffcf 	bl	80009fc <display_Led_Buffer>
	HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <scan_Led_2+0x28>)
 8000a66:	f001 fa0c 	bl	8001e82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <scan_Led_2+0x28>)
 8000a72:	f001 fa06 	bl	8001e82 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <display_Led7_Segment1>:
 */

#include "Led7-Segment.h"

void display_Led7_Segment1(int number)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b09      	cmp	r3, #9
 8000a8c:	f200 81bc 	bhi.w	8000e08 <display_Led7_Segment1+0x388>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <display_Led7_Segment1+0x18>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	08000b15 	.word	0x08000b15
 8000aa0:	08000b69 	.word	0x08000b69
 8000aa4:	08000bbd 	.word	0x08000bbd
 8000aa8:	08000c11 	.word	0x08000c11
 8000aac:	08000c65 	.word	0x08000c65
 8000ab0:	08000cb9 	.word	0x08000cb9
 8000ab4:	08000d0d 	.word	0x08000d0d
 8000ab8:	08000d61 	.word	0x08000d61
 8000abc:	08000db5 	.word	0x08000db5
	switch (number) {
		case 0:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	48d3      	ldr	r0, [pc, #844]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000ac6:	f001 f9dc 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	48d0      	ldr	r0, [pc, #832]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000ad2:	f001 f9d6 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000adc:	48cd      	ldr	r0, [pc, #820]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000ade:	f001 f9d0 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae8:	48ca      	ldr	r0, [pc, #808]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000aea:	f001 f9ca 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af4:	48c7      	ldr	r0, [pc, #796]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000af6:	f001 f9c4 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	48c4      	ldr	r0, [pc, #784]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b02:	f001 f9be 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	48c1      	ldr	r0, [pc, #772]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b0e:	f001 f9b8 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000b12:	e17a      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 1:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	48be      	ldr	r0, [pc, #760]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b1a:	f001 f9b2 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b24:	48bb      	ldr	r0, [pc, #748]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b26:	f001 f9ac 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b30:	48b8      	ldr	r0, [pc, #736]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b32:	f001 f9a6 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	48b5      	ldr	r0, [pc, #724]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b3e:	f001 f9a0 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b48:	48b2      	ldr	r0, [pc, #712]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b4a:	f001 f99a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b54:	48af      	ldr	r0, [pc, #700]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b56:	f001 f994 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b60:	48ac      	ldr	r0, [pc, #688]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b62:	f001 f98e 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000b66:	e150      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 2:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	48a9      	ldr	r0, [pc, #676]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b6e:	f001 f988 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b78:	48a6      	ldr	r0, [pc, #664]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b7a:	f001 f982 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b84:	48a3      	ldr	r0, [pc, #652]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b86:	f001 f97c 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	48a0      	ldr	r0, [pc, #640]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b92:	f001 f976 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9c:	489d      	ldr	r0, [pc, #628]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000b9e:	f001 f970 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba8:	489a      	ldr	r0, [pc, #616]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000baa:	f001 f96a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4897      	ldr	r0, [pc, #604]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bb6:	f001 f964 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000bba:	e126      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 3:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	4894      	ldr	r0, [pc, #592]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bc2:	f001 f95e 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	4891      	ldr	r0, [pc, #580]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bce:	f001 f958 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	488e      	ldr	r0, [pc, #568]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bda:	f001 f952 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	488b      	ldr	r0, [pc, #556]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000be6:	f001 f94c 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf0:	4888      	ldr	r0, [pc, #544]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bf2:	f001 f946 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4885      	ldr	r0, [pc, #532]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000bfe:	f001 f940 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4882      	ldr	r0, [pc, #520]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c0a:	f001 f93a 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000c0e:	e0fc      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 4:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	487f      	ldr	r0, [pc, #508]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c16:	f001 f934 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	487c      	ldr	r0, [pc, #496]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c22:	f001 f92e 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2c:	4879      	ldr	r0, [pc, #484]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c2e:	f001 f928 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c38:	4876      	ldr	r0, [pc, #472]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c3a:	f001 f922 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c44:	4873      	ldr	r0, [pc, #460]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c46:	f001 f91c 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c50:	4870      	ldr	r0, [pc, #448]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c52:	f001 f916 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5c:	486d      	ldr	r0, [pc, #436]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c5e:	f001 f910 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000c62:	e0d2      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 5:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	486a      	ldr	r0, [pc, #424]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c6a:	f001 f90a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	4867      	ldr	r0, [pc, #412]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c76:	f001 f904 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	4864      	ldr	r0, [pc, #400]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c82:	f001 f8fe 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	4861      	ldr	r0, [pc, #388]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c8e:	f001 f8f8 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c98:	485e      	ldr	r0, [pc, #376]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000c9a:	f001 f8f2 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	485b      	ldr	r0, [pc, #364]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000ca6:	f001 f8ec 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4858      	ldr	r0, [pc, #352]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cb2:	f001 f8e6 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000cb6:	e0a8      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 6:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4855      	ldr	r0, [pc, #340]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cbe:	f001 f8e0 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc8:	4852      	ldr	r0, [pc, #328]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cca:	f001 f8da 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd4:	484f      	ldr	r0, [pc, #316]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cd6:	f001 f8d4 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce0:	484c      	ldr	r0, [pc, #304]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000ce2:	f001 f8ce 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	4849      	ldr	r0, [pc, #292]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cee:	f001 f8c8 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf8:	4846      	ldr	r0, [pc, #280]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000cfa:	f001 f8c2 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	4843      	ldr	r0, [pc, #268]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d06:	f001 f8bc 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000d0a:	e07e      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 7:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4840      	ldr	r0, [pc, #256]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d12:	f001 f8b6 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1c:	483d      	ldr	r0, [pc, #244]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d1e:	f001 f8b0 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	483a      	ldr	r0, [pc, #232]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d2a:	f001 f8aa 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4837      	ldr	r0, [pc, #220]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d36:	f001 f8a4 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d42:	f001 f89e 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	4831      	ldr	r0, [pc, #196]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d4e:	f001 f898 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d5a:	f001 f892 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000d5e:	e054      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 8:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	482b      	ldr	r0, [pc, #172]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d66:	f001 f88c 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d72:	f001 f886 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7c:	4825      	ldr	r0, [pc, #148]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d7e:	f001 f880 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	4822      	ldr	r0, [pc, #136]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d8a:	f001 f87a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000d96:	f001 f874 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000da2:	f001 f86e 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dae:	f001 f868 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000db2:	e02a      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		case 9:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dba:	f001 f862 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dc6:	f001 f85c 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd0:	4810      	ldr	r0, [pc, #64]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dd2:	f001 f856 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dde:	f001 f850 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000dea:	f001 f84a 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000df6:	f001 f844 	bl	8001e82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <display_Led7_Segment1+0x394>)
 8000e02:	f001 f83e 	bl	8001e82 <HAL_GPIO_WritePin>
			break;
 8000e06:	e000      	b.n	8000e0a <display_Led7_Segment1+0x38a>
		default:
			break;
 8000e08:	bf00      	nop
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <display_Led7_Segment2>:

void display_Led7_Segment2(int number)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	f200 8180 	bhi.w	8001128 <display_Led7_Segment2+0x310>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <display_Led7_Segment2+0x18>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e59 	.word	0x08000e59
 8000e34:	08000ea1 	.word	0x08000ea1
 8000e38:	08000ee9 	.word	0x08000ee9
 8000e3c:	08000f31 	.word	0x08000f31
 8000e40:	08000f79 	.word	0x08000f79
 8000e44:	08000fc1 	.word	0x08000fc1
 8000e48:	08001009 	.word	0x08001009
 8000e4c:	08001051 	.word	0x08001051
 8000e50:	08001099 	.word	0x08001099
 8000e54:	080010e1 	.word	0x080010e1
	switch (number)
	{
			case 0:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	48b5      	ldr	r0, [pc, #724]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e5e:	f001 f810 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2102      	movs	r1, #2
 8000e66:	48b3      	ldr	r0, [pc, #716]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e68:	f001 f80b 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	48b0      	ldr	r0, [pc, #704]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e72:	f001 f806 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2108      	movs	r1, #8
 8000e7a:	48ae      	ldr	r0, [pc, #696]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e7c:	f001 f801 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2110      	movs	r1, #16
 8000e84:	48ab      	ldr	r0, [pc, #684]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e86:	f000 fffc 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	48a9      	ldr	r0, [pc, #676]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e90:	f000 fff7 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	48a6      	ldr	r0, [pc, #664]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000e9a:	f000 fff2 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8000e9e:	e144      	b.n	800112a <display_Led7_Segment2+0x312>
			case 1:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	48a3      	ldr	r0, [pc, #652]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ea6:	f000 ffec 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2102      	movs	r1, #2
 8000eae:	48a1      	ldr	r0, [pc, #644]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000eb0:	f000 ffe7 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	489e      	ldr	r0, [pc, #632]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000eba:	f000 ffe2 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	489c      	ldr	r0, [pc, #624]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ec4:	f000 ffdd 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2110      	movs	r1, #16
 8000ecc:	4899      	ldr	r0, [pc, #612]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ece:	f000 ffd8 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4897      	ldr	r0, [pc, #604]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ed8:	f000 ffd3 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	4894      	ldr	r0, [pc, #592]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ee2:	f000 ffce 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8000ee6:	e120      	b.n	800112a <display_Led7_Segment2+0x312>
			case 2:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	4891      	ldr	r0, [pc, #580]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000eee:	f000 ffc8 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	488f      	ldr	r0, [pc, #572]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ef8:	f000 ffc3 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	488c      	ldr	r0, [pc, #560]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f02:	f000 ffbe 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	488a      	ldr	r0, [pc, #552]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f0c:	f000 ffb9 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2110      	movs	r1, #16
 8000f14:	4887      	ldr	r0, [pc, #540]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f16:	f000 ffb4 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4885      	ldr	r0, [pc, #532]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f20:	f000 ffaf 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	4882      	ldr	r0, [pc, #520]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f2a:	f000 ffaa 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8000f2e:	e0fc      	b.n	800112a <display_Led7_Segment2+0x312>
			case 3:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	487f      	ldr	r0, [pc, #508]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f36:	f000 ffa4 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	487d      	ldr	r0, [pc, #500]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f40:	f000 ff9f 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	487a      	ldr	r0, [pc, #488]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f4a:	f000 ff9a 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2108      	movs	r1, #8
 8000f52:	4878      	ldr	r0, [pc, #480]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f54:	f000 ff95 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4875      	ldr	r0, [pc, #468]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f5e:	f000 ff90 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2120      	movs	r1, #32
 8000f66:	4873      	ldr	r0, [pc, #460]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f68:	f000 ff8b 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4870      	ldr	r0, [pc, #448]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f72:	f000 ff86 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8000f76:	e0d8      	b.n	800112a <display_Led7_Segment2+0x312>
			case 4:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	486d      	ldr	r0, [pc, #436]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f7e:	f000 ff80 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2102      	movs	r1, #2
 8000f86:	486b      	ldr	r0, [pc, #428]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f88:	f000 ff7b 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4868      	ldr	r0, [pc, #416]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f92:	f000 ff76 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4866      	ldr	r0, [pc, #408]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000f9c:	f000 ff71 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4863      	ldr	r0, [pc, #396]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fa6:	f000 ff6c 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	4861      	ldr	r0, [pc, #388]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fb0:	f000 ff67 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	485e      	ldr	r0, [pc, #376]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fba:	f000 ff62 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8000fbe:	e0b4      	b.n	800112a <display_Led7_Segment2+0x312>
			case 5:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	485b      	ldr	r0, [pc, #364]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fc6:	f000 ff5c 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4859      	ldr	r0, [pc, #356]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fd0:	f000 ff57 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4856      	ldr	r0, [pc, #344]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fda:	f000 ff52 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4854      	ldr	r0, [pc, #336]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fe4:	f000 ff4d 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4851      	ldr	r0, [pc, #324]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000fee:	f000 ff48 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	484f      	ldr	r0, [pc, #316]	; (8001134 <display_Led7_Segment2+0x31c>)
 8000ff8:	f000 ff43 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	484c      	ldr	r0, [pc, #304]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001002:	f000 ff3e 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8001006:	e090      	b.n	800112a <display_Led7_Segment2+0x312>
			case 6:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	4849      	ldr	r0, [pc, #292]	; (8001134 <display_Led7_Segment2+0x31c>)
 800100e:	f000 ff38 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2102      	movs	r1, #2
 8001016:	4847      	ldr	r0, [pc, #284]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001018:	f000 ff33 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2104      	movs	r1, #4
 8001020:	4844      	ldr	r0, [pc, #272]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001022:	f000 ff2e 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	4842      	ldr	r0, [pc, #264]	; (8001134 <display_Led7_Segment2+0x31c>)
 800102c:	f000 ff29 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	483f      	ldr	r0, [pc, #252]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001036:	f000 ff24 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	483d      	ldr	r0, [pc, #244]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001040:	f000 ff1f 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	483a      	ldr	r0, [pc, #232]	; (8001134 <display_Led7_Segment2+0x31c>)
 800104a:	f000 ff1a 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 800104e:	e06c      	b.n	800112a <display_Led7_Segment2+0x312>
			case 7:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001056:	f000 ff14 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	4835      	ldr	r0, [pc, #212]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001060:	f000 ff0f 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2104      	movs	r1, #4
 8001068:	4832      	ldr	r0, [pc, #200]	; (8001134 <display_Led7_Segment2+0x31c>)
 800106a:	f000 ff0a 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	4830      	ldr	r0, [pc, #192]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001074:	f000 ff05 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2110      	movs	r1, #16
 800107c:	482d      	ldr	r0, [pc, #180]	; (8001134 <display_Led7_Segment2+0x31c>)
 800107e:	f000 ff00 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	482b      	ldr	r0, [pc, #172]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001088:	f000 fefb 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	4828      	ldr	r0, [pc, #160]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001092:	f000 fef6 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8001096:	e048      	b.n	800112a <display_Led7_Segment2+0x312>
			case 8:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	4825      	ldr	r0, [pc, #148]	; (8001134 <display_Led7_Segment2+0x31c>)
 800109e:	f000 fef0 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	4823      	ldr	r0, [pc, #140]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010a8:	f000 feeb 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	4820      	ldr	r0, [pc, #128]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010b2:	f000 fee6 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2108      	movs	r1, #8
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010bc:	f000 fee1 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	481b      	ldr	r0, [pc, #108]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010c6:	f000 fedc 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4819      	ldr	r0, [pc, #100]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010d0:	f000 fed7 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010da:	f000 fed2 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 80010de:	e024      	b.n	800112a <display_Led7_Segment2+0x312>
			case 9:
				HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010e6:	f000 fecc 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010f0:	f000 fec7 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2104      	movs	r1, #4
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <display_Led7_Segment2+0x31c>)
 80010fa:	f000 fec2 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2108      	movs	r1, #8
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001104:	f000 febd 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <display_Led7_Segment2+0x31c>)
 800110e:	f000 feb8 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001118:	f000 feb3 	bl	8001e82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <display_Led7_Segment2+0x31c>)
 8001122:	f000 feae 	bl	8001e82 <HAL_GPIO_WritePin>
				break;
 8001126:	e000      	b.n	800112a <display_Led7_Segment2+0x312>
			default:
				break;
 8001128:	bf00      	nop
		}
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00

08001138 <display_Led7_Segment>:

void display_Led7_Segment(int number)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	number = number % 100;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <display_Led7_Segment+0x5c>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1151      	asrs	r1, r2, #5
 800114a:	17da      	asrs	r2, r3, #31
 800114c:	1a8a      	subs	r2, r1, r2
 800114e:	2164      	movs	r1, #100	; 0x64
 8001150:	fb01 f202 	mul.w	r2, r1, r2
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	607b      	str	r3, [r7, #4]
	display_Led7_Segment2(number / 10);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <display_Led7_Segment+0x60>)
 800115c:	fb82 1203 	smull	r1, r2, r2, r3
 8001160:	1092      	asrs	r2, r2, #2
 8001162:	17db      	asrs	r3, r3, #31
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe56 	bl	8000e18 <display_Led7_Segment2>
	display_Led7_Segment1(number % 10);
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <display_Led7_Segment+0x60>)
 8001170:	fb83 1302 	smull	r1, r3, r3, r2
 8001174:	1099      	asrs	r1, r3, #2
 8001176:	17d3      	asrs	r3, r2, #31
 8001178:	1ac9      	subs	r1, r1, r3
 800117a:	460b      	mov	r3, r1
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	1ad1      	subs	r1, r2, r3
 8001184:	4608      	mov	r0, r1
 8001186:	f7ff fc7b 	bl	8000a80 <display_Led7_Segment1>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	66666667 	.word	0x66666667

0800119c <SCH_Init>:

#include "scheduler.h"

static sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	e033      	b.n	8001210 <SCH_Init+0x74>
		SCH_tasks_G[i].pTask = 0x0000000;
 80011a8:	491e      	ldr	r1, [pc, #120]	; (8001224 <SCH_Init+0x88>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 80011ba:	491a      	ldr	r1, [pc, #104]	; (8001224 <SCH_Init+0x88>)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3304      	adds	r3, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 80011ce:	4915      	ldr	r1, [pc, #84]	; (8001224 <SCH_Init+0x88>)
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	3308      	adds	r3, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 80011e2:	4910      	ldr	r1, [pc, #64]	; (8001224 <SCH_Init+0x88>)
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	330c      	adds	r3, #12
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = 0;
 80011f6:	490b      	ldr	r1, [pc, #44]	; (8001224 <SCH_Init+0x88>)
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3310      	adds	r3, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b27      	cmp	r3, #39	; 0x27
 8001214:	ddc8      	ble.n	80011a8 <SCH_Init+0xc>
	}
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000084 	.word	0x20000084

08001228 <SCH_Update>:

void SCH_Update(void){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	e048      	b.n	80012c6 <SCH_Update+0x9e>
		 if(SCH_tasks_G[i].Delay > 0){
 8001234:	4928      	ldr	r1, [pc, #160]	; (80012d8 <SCH_Update+0xb0>)
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d013      	beq.n	8001272 <SCH_Update+0x4a>
			 SCH_tasks_G[i].Delay --;
 800124a:	4923      	ldr	r1, [pc, #140]	; (80012d8 <SCH_Update+0xb0>)
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3304      	adds	r3, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	1e59      	subs	r1, r3, #1
 800125e:	481e      	ldr	r0, [pc, #120]	; (80012d8 <SCH_Update+0xb0>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4403      	add	r3, r0
 800126c:	3304      	adds	r3, #4
 800126e:	6019      	str	r1, [r3, #0]
 8001270:	e026      	b.n	80012c0 <SCH_Update+0x98>
		 }else{

				 SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001272:	4919      	ldr	r1, [pc, #100]	; (80012d8 <SCH_Update+0xb0>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3308      	adds	r3, #8
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <SCH_Update+0xb0>)
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4403      	add	r3, r0
 8001292:	3304      	adds	r3, #4
 8001294:	6019      	str	r1, [r3, #0]
				 SCH_tasks_G[i].RunMe += 1;
 8001296:	4910      	ldr	r1, [pc, #64]	; (80012d8 <SCH_Update+0xb0>)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	330c      	adds	r3, #12
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2d8      	uxtb	r0, r3
 80012ac:	490a      	ldr	r1, [pc, #40]	; (80012d8 <SCH_Update+0xb0>)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	330c      	adds	r3, #12
 80012bc:	4602      	mov	r2, r0
 80012be:	701a      	strb	r2, [r3, #0]
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b27      	cmp	r3, #39	; 0x27
 80012ca:	ddb3      	ble.n	8001234 <SCH_Update+0xc>
		 }
	 }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000084 	.word	0x20000084

080012dc <SCH_Add_Task>:

uint8_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	uint8_t Index = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80012ec:	e002      	b.n	80012f4 <SCH_Add_Task+0x18>
		Index++;
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	3301      	adds	r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80012f4:	7dfa      	ldrb	r2, [r7, #23]
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <SCH_Add_Task+0xb0>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <SCH_Add_Task+0x32>
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b27      	cmp	r3, #39	; 0x27
 800130c:	d9ef      	bls.n	80012ee <SCH_Add_Task+0x12>
	SCH_tasks_G[Index].pTask = pFunction;
 800130e:	7dfa      	ldrb	r2, [r7, #23]
 8001310:	491e      	ldr	r1, [pc, #120]	; (800138c <SCH_Add_Task+0xb0>)
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY/TICK;
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	491a      	ldr	r1, [pc, #104]	; (8001390 <SCH_Add_Task+0xb4>)
 8001326:	fba1 1303 	umull	r1, r3, r1, r3
 800132a:	08d9      	lsrs	r1, r3, #3
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <SCH_Add_Task+0xb0>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4403      	add	r3, r0
 8001338:	3304      	adds	r3, #4
 800133a:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD/TICK;
 800133c:	7dfa      	ldrb	r2, [r7, #23]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4913      	ldr	r1, [pc, #76]	; (8001390 <SCH_Add_Task+0xb4>)
 8001342:	fba1 1303 	umull	r1, r3, r1, r3
 8001346:	08d9      	lsrs	r1, r3, #3
 8001348:	4810      	ldr	r0, [pc, #64]	; (800138c <SCH_Add_Task+0xb0>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	3308      	adds	r3, #8
 8001356:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8001358:	7dfa      	ldrb	r2, [r7, #23]
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <SCH_Add_Task+0xb0>)
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	330c      	adds	r3, #12
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 800136c:	7dfa      	ldrb	r2, [r7, #23]
 800136e:	7df9      	ldrb	r1, [r7, #23]
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <SCH_Add_Task+0xb0>)
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4403      	add	r3, r0
 800137c:	3310      	adds	r3, #16
 800137e:	6019      	str	r1, [r3, #0]
	return Index;
 8001380:	7dfb      	ldrb	r3, [r7, #23]
}
 8001382:	4618      	mov	r0, r3
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000084 	.word	0x20000084
 8001390:	cccccccd 	.word	0xcccccccd

08001394 <SCH_Delete_Task>:


void SCH_Delete_Task(uint8_t taskID)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
		SCH_tasks_G[taskID].pTask = 0x0000000;
 800139e:	79fa      	ldrb	r2, [r7, #7]
 80013a0:	491a      	ldr	r1, [pc, #104]	; (800140c <SCH_Delete_Task+0x78>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Period = 0;
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4916      	ldr	r1, [pc, #88]	; (800140c <SCH_Delete_Task+0x78>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3308      	adds	r3, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Delay = 0;
 80013c4:	79fa      	ldrb	r2, [r7, #7]
 80013c6:	4911      	ldr	r1, [pc, #68]	; (800140c <SCH_Delete_Task+0x78>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3304      	adds	r3, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].RunMe = 0;
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	490c      	ldr	r1, [pc, #48]	; (800140c <SCH_Delete_Task+0x78>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[taskID].TaskID = 0;
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	4907      	ldr	r1, [pc, #28]	; (800140c <SCH_Delete_Task+0x78>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3310      	adds	r3, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000084 	.word	0x20000084

08001410 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e045      	b.n	80014a8 <SCH_Dispatch_Tasks+0x98>
		 if(SCH_tasks_G[i].RunMe > 0){
 800141c:	4926      	ldr	r1, [pc, #152]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	330c      	adds	r3, #12
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d037      	beq.n	80014a2 <SCH_Dispatch_Tasks+0x92>
			 SCH_tasks_G[i].RunMe --;
 8001432:	4921      	ldr	r1, [pc, #132]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	330c      	adds	r3, #12
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2d8      	uxtb	r0, r3
 8001448:	491b      	ldr	r1, [pc, #108]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	330c      	adds	r3, #12
 8001458:	4602      	mov	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
			 if(SCH_tasks_G[i].pTask){
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <SCH_Dispatch_Tasks+0x72>
				 (*SCH_tasks_G[i].pTask)();
 8001470:	4911      	ldr	r1, [pc, #68]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4798      	blx	r3
			 }
			 if(SCH_tasks_G[i].Period == 0){
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <SCH_Dispatch_Tasks+0xa8>)
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3308      	adds	r3, #8
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <SCH_Dispatch_Tasks+0x92>
				 SCH_Delete_Task(i);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff79 	bl	8001394 <SCH_Delete_Task>
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b27      	cmp	r3, #39	; 0x27
 80014ac:	ddb6      	ble.n	800141c <SCH_Dispatch_Tasks+0xc>
			 }

		 }
	 }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000084 	.word	0x20000084

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 f9de 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f81c 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f8a2 	bl	8001610 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014cc:	f000 f854 	bl	8001578 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <main+0x38>)
 80014d2:	f001 f91b 	bl	800270c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80014d6:	f7ff fe61 	bl	800119c <SCH_Init>
  SCH_Add_Task(FSM_Normal_Mode, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <main+0x3c>)
 80014e0:	f7ff fefc 	bl	80012dc <SCH_Add_Task>
  SCH_Add_Task(FSM_Settings_run, 0, 10);
 80014e4:	220a      	movs	r2, #10
 80014e6:	2100      	movs	r1, #0
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <main+0x40>)
 80014ea:	f7ff fef7 	bl	80012dc <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80014ee:	f7ff ff8f 	bl	8001410 <SCH_Dispatch_Tasks>
 80014f2:	e7fc      	b.n	80014ee <main+0x32>
 80014f4:	200003d0 	.word	0x200003d0
 80014f8:	0800033d 	.word	0x0800033d
 80014fc:	080003a1 	.word	0x080003a1

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2228      	movs	r2, #40	; 0x28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fcac 	bl	8002e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2310      	movs	r3, #16
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fcbc 	bl	8001eb4 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001542:	f000 f8e3 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ff28 	bl	80023b4 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800156a:	f000 f8cf 	bl	800170c <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3740      	adds	r7, #64	; 0x40
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM2_Init+0x94>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_TIM2_Init+0x94>)
 800159e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_TIM2_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM2_Init+0x94>)
 80015ac:	2209      	movs	r2, #9
 80015ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_TIM2_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM2_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM2_Init+0x94>)
 80015be:	f001 f855 	bl	800266c <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c8:	f000 f8a0 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_TIM2_Init+0x94>)
 80015da:	f001 f9d3 	bl	8002984 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e4:	f000 f892 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM2_Init+0x94>)
 80015f6:	f001 fbab 	bl	8002d50 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f884 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200003d0 	.word	0x200003d0

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_GPIO_Init+0xd4>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <MX_GPIO_Init+0xd4>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_GPIO_Init+0xd4>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_GPIO_Init+0xd4>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <MX_GPIO_Init+0xd4>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <MX_GPIO_Init+0xd4>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <MX_GPIO_Init+0xd4>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <MX_GPIO_Init+0xd4>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_GPIO_Init+0xd4>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <MX_GPIO_Init+0xd8>)
 8001674:	f000 fc05 	bl	8001e82 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_3_Pin
 8001678:	2201      	movs	r2, #1
 800167a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <MX_GPIO_Init+0xdc>)
 8001680:	f000 fbff 	bl	8001e82 <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin|EN_1_Pin
                          |EN_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : SELECT_BUTTON_Pin MODIFY_BUTTON_Pin SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = SELECT_BUTTON_Pin|MODIFY_BUTTON_Pin|SET_BUTTON_Pin;
 8001684:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <MX_GPIO_Init+0xe0>)
 800169a:	f000 fa61 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800169e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016a2:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <MX_GPIO_Init+0xd8>)
 80016b8:	f000 fa52 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin EN_1_Pin
                           EN_2_Pin SEG_3_Pin SEG_4_Pin SEG_5_Pin
                           SEG_6_Pin LED_0_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_3_Pin
 80016bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c0:	613b      	str	r3, [r7, #16]
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin|EN_1_Pin
                          |EN_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|LED_0_Pin|LED_1_Pin|LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_GPIO_Init+0xdc>)
 80016d6:	f000 fa43 	bl	8001b60 <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40011000 	.word	0x40011000

080016f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80016fc:	f7ff fd94 	bl	8001228 <SCH_Update>
	getKeyInput();
 8001700:	f7fe fd5a 	bl	80001b8 <getKeyInput>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_MspInit+0x5c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x5c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MspInit+0x60>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_MspInit+0x60>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178c:	d113      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_TIM_Base_MspInit+0x44>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_TIM_Base_MspInit+0x44>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_TIM_Base_MspInit+0x44>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201c      	movs	r0, #28
 80017ac:	f000 f9a1 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b0:	201c      	movs	r0, #28
 80017b2:	f000 f9ba 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 f87f 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM2_IRQHandler+0x10>)
 800181a:	f000 ffc3 	bl	80027a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003d0 	.word	0x200003d0

08001828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff fff8 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800183a:	490c      	ldr	r1, [pc, #48]	; (800186c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <LoopFillZerobss+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001850:	4c09      	ldr	r4, [pc, #36]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f001 fae1 	bl	8002e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7ff fe2b 	bl	80014bc <main>
  bx lr
 8001866:	4770      	bx	lr
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001870:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8001874:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001878:	2000041c 	.word	0x2000041c

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x28>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f923 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff ff3c 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f93b 	bl	8001b46 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f903 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000040 	.word	0x20000040
 8001904:	20000048 	.word	0x20000048
 8001908:	20000044 	.word	0x20000044

0800190c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x1c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x20>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_IncTick+0x20>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000048 	.word	0x20000048
 800192c:	20000418 	.word	0x20000418

08001930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <HAL_GetTick+0x10>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000418 	.word	0x20000418

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <__NVIC_EnableIRQ+0x34>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff90 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff2d 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff42 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff35 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b08b      	sub	sp, #44	; 0x2c
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e148      	b.n	8001e06 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b74:	2201      	movs	r2, #1
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8137 	bne.w	8001e00 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4aa3      	ldr	r2, [pc, #652]	; (8001e24 <HAL_GPIO_Init+0x2c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d05e      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001b9c:	4aa1      	ldr	r2, [pc, #644]	; (8001e24 <HAL_GPIO_Init+0x2c4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d875      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001ba2:	4aa1      	ldr	r2, [pc, #644]	; (8001e28 <HAL_GPIO_Init+0x2c8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d058      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001ba8:	4a9f      	ldr	r2, [pc, #636]	; (8001e28 <HAL_GPIO_Init+0x2c8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d86f      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bae:	4a9f      	ldr	r2, [pc, #636]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d052      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bb4:	4a9d      	ldr	r2, [pc, #628]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d869      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bba:	4a9d      	ldr	r2, [pc, #628]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04c      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bc0:	4a9b      	ldr	r2, [pc, #620]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d863      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bc6:	4a9b      	ldr	r2, [pc, #620]	; (8001e34 <HAL_GPIO_Init+0x2d4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d046      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bcc:	4a99      	ldr	r2, [pc, #612]	; (8001e34 <HAL_GPIO_Init+0x2d4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d85d      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d82a      	bhi.n	8001c2c <HAL_GPIO_Init+0xcc>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d859      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <HAL_GPIO_Init+0x80>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c5b 	.word	0x08001c5b
 8001be4:	08001c35 	.word	0x08001c35
 8001be8:	08001c47 	.word	0x08001c47
 8001bec:	08001c89 	.word	0x08001c89
 8001bf0:	08001c8f 	.word	0x08001c8f
 8001bf4:	08001c8f 	.word	0x08001c8f
 8001bf8:	08001c8f 	.word	0x08001c8f
 8001bfc:	08001c8f 	.word	0x08001c8f
 8001c00:	08001c8f 	.word	0x08001c8f
 8001c04:	08001c8f 	.word	0x08001c8f
 8001c08:	08001c8f 	.word	0x08001c8f
 8001c0c:	08001c8f 	.word	0x08001c8f
 8001c10:	08001c8f 	.word	0x08001c8f
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001c8f 	.word	0x08001c8f
 8001c20:	08001c8f 	.word	0x08001c8f
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c51 	.word	0x08001c51
 8001c2c:	4a82      	ldr	r2, [pc, #520]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c32:	e02c      	b.n	8001c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e029      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	3304      	adds	r3, #4
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e024      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e01f      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	330c      	adds	r3, #12
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e01a      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c62:	2304      	movs	r3, #4
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e013      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	611a      	str	r2, [r3, #16]
          break;
 8001c7a:	e009      	b.n	8001c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	615a      	str	r2, [r3, #20]
          break;
 8001c86:	e003      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          break;
 8001c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d801      	bhi.n	8001c9a <HAL_GPIO_Init+0x13a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_Init+0x13e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d802      	bhi.n	8001cac <HAL_GPIO_Init+0x14c>
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x152>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	210f      	movs	r1, #15
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	6a39      	ldr	r1, [r7, #32]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8090 	beq.w	8001e00 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf8:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a49      	ldr	r2, [pc, #292]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a48      	ldr	r2, [pc, #288]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1dc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1d8>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d40:	2300      	movs	r3, #0
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d52:	493b      	ldr	r1, [pc, #236]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4933      	ldr	r1, [pc, #204]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	492d      	ldr	r1, [pc, #180]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4929      	ldr	r1, [pc, #164]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4923      	ldr	r1, [pc, #140]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	491f      	ldr	r1, [pc, #124]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4919      	ldr	r1, [pc, #100]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4915      	ldr	r1, [pc, #84]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3301      	adds	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f aeaf 	bne.w	8001b74 <HAL_GPIO_Init+0x14>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	372c      	adds	r7, #44	; 0x2c
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	10320000 	.word	0x10320000
 8001e28:	10310000 	.word	0x10310000
 8001e2c:	10220000 	.word	0x10220000
 8001e30:	10210000 	.word	0x10210000
 8001e34:	10120000 	.word	0x10120000
 8001e38:	10110000 	.word	0x10110000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e92:	787b      	ldrb	r3, [r7, #1]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	041a      	lsls	r2, r3, #16
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	611a      	str	r2, [r3, #16]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e26c      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8087 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed4:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d00c      	beq.n	8001efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d112      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5e>
 8001eec:	4b8c      	ldr	r3, [pc, #560]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d06c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x12c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d168      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e246      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x76>
 8001f1c:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a7f      	ldr	r2, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e02e      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x98>
 8001f32:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7a      	ldr	r2, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b78      	ldr	r3, [pc, #480]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a77      	ldr	r2, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e01d      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0xbc>
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a71      	ldr	r2, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0xd4>
 8001f70:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fcce 	bl	8001930 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fcca 	bl	8001930 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1fa      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe4>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fcba 	bl	8001930 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fcb6 	bl	8001930 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1e6      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x10c>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b08      	cmp	r3, #8
 8002004:	d11c      	bne.n	8002040 <HAL_RCC_OscConfig+0x18c>
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x176>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1ba      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4939      	ldr	r1, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	e03a      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x270>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fc6f 	bl	8001930 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fc6b 	bl	8001930 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e19b      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x270>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fc4e 	bl	8001930 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fc4a 	bl	8001930 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e17a      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d019      	beq.n	80020fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fc2e 	bl	8001930 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc2a 	bl	8001930 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e15a      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 fa9a 	bl	8002630 <RCC_Delay>
 80020fc:	e01c      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_OscConfig+0x274>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff fc14 	bl	8001930 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	e00f      	b.n	800212c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fc10 	bl	8001930 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d908      	bls.n	800212c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e140      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	42420000 	.word	0x42420000
 8002128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e9      	bne.n	800210c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a6 	beq.w	8002292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b94      	ldr	r3, [pc, #592]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a93      	ldr	r2, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7ff fbd1 	bl	8001930 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7ff fbcd 	bl	8001930 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0fd      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x312>
 80021b8:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a7a      	ldr	r2, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e02d      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x334>
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a75      	ldr	r2, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a72      	ldr	r2, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	e01c      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x356>
 80021f0:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a6c      	ldr	r2, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a69      	ldr	r2, [pc, #420]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x36e>
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a66      	ldr	r2, [pc, #408]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a63      	ldr	r2, [pc, #396]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d015      	beq.n	8002256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff fb81 	bl	8001930 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7ff fb7d 	bl	8001930 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0ab      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ee      	beq.n	8002232 <HAL_RCC_OscConfig+0x37e>
 8002254:	e014      	b.n	8002280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff fb6b 	bl	8001930 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff fb67 	bl	8001930 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e095      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ee      	bne.n	800225e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8081 	beq.w	800239e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d061      	beq.n	800236c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d146      	bne.n	800233e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fb3b 	bl	8001930 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff fb37 	bl	8001930 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e067      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d108      	bne.n	80022f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	492d      	ldr	r1, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a19      	ldr	r1, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	430b      	orrs	r3, r1
 800230a:	4927      	ldr	r1, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fb0b 	bl	8001930 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff fb07 	bl	8001930 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e037      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x46a>
 800233c:	e02f      	b.n	800239e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCC_OscConfig+0x4fc>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff faf4 	bl	8001930 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff faf0 	bl	8001930 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e020      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x498>
 800236a:	e018      	b.n	800239e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e013      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	429a      	cmp	r2, r3
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42420060 	.word	0x42420060

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4965      	ldr	r1, [pc, #404]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff fa44 	bl	8001930 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff fa40 	bl	8001930 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f9a2 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	08002e94 	.word	0x08002e94
 8002580:	20000040 	.word	0x20000040
 8002584:	20000044 	.word	0x20000044

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x36>
 80025b6:	e027      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e027      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	fb02 f203 	mul.w	r2, r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	693b      	ldr	r3, [r7, #16]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	08002ea4 	.word	0x08002ea4
 8002628:	08002eb4 	.word	0x08002eb4
 800262c:	003d0900 	.word	0x003d0900

08002630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <RCC_Delay+0x34>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <RCC_Delay+0x38>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800264c:	bf00      	nop
  }
  while (Delay --);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <RCC_Delay+0x1c>
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000040 	.word	0x20000040
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e041      	b.n	8002702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff f872 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fa56 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d001      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e035      	b.n	8002790 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_TIM_Base_Start_IT+0x90>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIM_Base_Start_IT+0x4e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274e:	d004      	beq.n	800275a <HAL_TIM_Base_Start_IT+0x4e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d111      	bne.n	800277e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b06      	cmp	r3, #6
 800276a:	d010      	beq.n	800278e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277c:	e007      	b.n	800278e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400

080027a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0202 	mvn.w	r2, #2
 80027d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f998 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f98b 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f99a 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0204 	mvn.w	r2, #4
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f972 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f965 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f974 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f94c 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f93f 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f94e 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d020      	beq.n	80028ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0210 	mvn.w	r2, #16
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2208      	movs	r2, #8
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f926 	bl	8002b24 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f919 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f928 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0201 	mvn.w	r2, #1
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fef2 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa6f 	bl	8002e12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8f8 	bl	8002b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0220 	mvn.w	r2, #32
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa42 	bl	8002e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIM_ConfigClockSource+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e0b4      	b.n	8002b0a <HAL_TIM_ConfigClockSource+0x186>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d8:	d03e      	beq.n	8002a58 <HAL_TIM_ConfigClockSource+0xd4>
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	f200 8087 	bhi.w	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_TIM_ConfigClockSource+0x172>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d87f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d01a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xa6>
 80029f4:	2b70      	cmp	r3, #112	; 0x70
 80029f6:	d87b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d050      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x11a>
 80029fc:	2b60      	cmp	r3, #96	; 0x60
 80029fe:	d877      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b50      	cmp	r3, #80	; 0x50
 8002a02:	d03c      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xfa>
 8002a04:	2b50      	cmp	r3, #80	; 0x50
 8002a06:	d873      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d058      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x13a>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d86f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d064      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	2b30      	cmp	r3, #48	; 0x30
 8002a16:	d86b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d060      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d867      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d05a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15a>
 8002a28:	e062      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f000 f96a 	bl	8002d12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	609a      	str	r2, [r3, #8]
      break;
 8002a56:	e04f      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f000 f953 	bl	8002d12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a7a:	609a      	str	r2, [r3, #8]
      break;
 8002a7c:	e03c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f000 f8ca 	bl	8002c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2150      	movs	r1, #80	; 0x50
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f921 	bl	8002cde <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e02c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f000 f8e8 	bl	8002c80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2160      	movs	r1, #96	; 0x60
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f911 	bl	8002cde <TIM_ITRx_SetConfig>
      break;
 8002abc:	e01c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f8aa 	bl	8002c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f901 	bl	8002cde <TIM_ITRx_SetConfig>
      break;
 8002adc:	e00c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f000 f8f8 	bl	8002cde <TIM_ITRx_SetConfig>
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e000      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
	...

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x28>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x28>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	; (8002c20 <TIM_Base_SetConfig+0xc4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x52>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x52>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_Base_SetConfig+0xc4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	611a      	str	r2, [r3, #16]
  }
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400

08002c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 030a 	bic.w	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	031b      	lsls	r3, r3, #12
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f043 0307 	orr.w	r3, r3, #7
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b087      	sub	sp, #28
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	021a      	lsls	r2, r3, #8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	609a      	str	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e041      	b.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10c      	bne.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400

08002e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2600      	movs	r6, #0
 8002e28:	4d0c      	ldr	r5, [pc, #48]	; (8002e5c <__libc_init_array+0x38>)
 8002e2a:	4c0d      	ldr	r4, [pc, #52]	; (8002e60 <__libc_init_array+0x3c>)
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	f000 f822 	bl	8002e7c <_init>
 8002e38:	2600      	movs	r6, #0
 8002e3a:	4d0a      	ldr	r5, [pc, #40]	; (8002e64 <__libc_init_array+0x40>)
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <__libc_init_array+0x44>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	08002eb8 	.word	0x08002eb8
 8002e60:	08002eb8 	.word	0x08002eb8
 8002e64:	08002eb8 	.word	0x08002eb8
 8002e68:	08002ebc 	.word	0x08002ebc

08002e6c <memset>:
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4402      	add	r2, r0
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d100      	bne.n	8002e76 <memset+0xa>
 8002e74:	4770      	bx	lr
 8002e76:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7a:	e7f9      	b.n	8002e70 <memset+0x4>

08002e7c <_init>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	bf00      	nop
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr

08002e88 <_fini>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr
